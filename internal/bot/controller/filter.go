package controller

import (
	"fmt"
	"github.com/Aoi-hosizora/ahlib/xstatus"
	"github.com/Aoi-hosizora/ahlib/xstring"
	"github.com/Aoi-hosizora/github-telebot/internal/bot/button"
	"github.com/Aoi-hosizora/github-telebot/internal/bot/fsm"
	"github.com/Aoi-hosizora/github-telebot/internal/bot/server"
	"github.com/Aoi-hosizora/github-telebot/internal/pkg/dao"
	"github.com/Aoi-hosizora/github-telebot/internal/service"
	"gopkg.in/tucnak/telebot.v2"
	"strings"
)

const (
	ISSUE_ONLY_FOR_TOKEN           = "Send issue can only be allowed for users that bind with token."
	ALLOW_ISSUE_Q                  = "Would you need to filter the message generated by yourself?"
	ALLOW_ISSUE_FAILED             = "Failed to allow bot to send issue events periodically."
	ALLOW_ISSUE_FILTER_SUCCESS     = "Success to allow bot to send issue events periodically (filter message generated by myself)."
	ALLOW_ISSUE_NOT_FILTER_SUCCESS = "Success to allow bot to send issue events periodically (do not filter message generated by myself)."

	DISALLOW_ISSUE_FAILED  = "Failed to disallow bot to send issue events periodically."
	DISALLOW_ISSUE_SUCCESS = "Success to disallow bot to send issue events periodically."

	FILTER_NONE          = "You have not any notify filters yet, please send /addfilter to add one."
	FILTER_RESULT        = "Filters (all for %d, \"$reponame $actor $event_type\"):\n%s"
	WRONG_FILTER_PATTERN = "Please send the correct filter pattern, format: `$reponame $actor $event_type`, send /cancel to cancel."

	ADD_FILTER_Q = "Please send the filter pattern, format: `$reponame $actor $event_type`\n" +
		"Here `$actor` and `$event_type` can be `*` to represent all actors and all events.\nSend /supportedevents to see all supported events, send /cancel to cancel."
	ADD_FILTER_FAILED  = "Failed to add a filter, please retry later."
	FILTER_EXISTED     = "Pattern \"%s %s %s\" has been existed."
	ADD_FILTER_SUCCESS = "Success to create a new filter, now you will not receive %s from %s about %s." // event actor reponame

	DELETE_FILTER_Q = "Please send the filter pattern, format: `$reponame $actor $event_type`\n" +
		"Send /supportedevents to see all supported events, send /cancel to cancel."
	DELETE_FILTER_FAILED  = "Failed to remove a filter, please retry later."
	FILTER_NOT_FOUND      = "Pattern \"%s %s %s\" is not found."
	DELETE_FILTER_SUCCESS = "Success to delete filter, pattern: %s %s %s."
)

// /allowissue
func AllowIssueCtrl(m *telebot.Message) {
	user := dao.QueryUser(m.Chat.ID)
	if user == nil {
		_ = server.Bot().Reply(m, BIND_NOT_YET)
		return
	}
	if user.Token == "" {
		_ = server.Bot().Reply(m, ISSUE_ONLY_FOR_TOKEN)
		return
	}

	_ = server.Bot().Reply(m, ALLOW_ISSUE_Q, &telebot.ReplyMarkup{
		InlineKeyboard: [][]telebot.InlineButton{
			{*button.InlineBtnFilter, *button.InlineBtnNotFilter}, {*button.InlineBtnCancel},
		},
	})
}

// button.InlineBtnFilter
func InlineBtnFilterCtrl(c *telebot.Callback) {
	m := c.Message
	_, _ = server.Bot().Edit(m, fmt.Sprintf("%s (filter)", m.Text))

	flag := ""
	user := dao.QueryUser(m.Chat.ID)
	if user == nil {
		flag = BIND_NOT_YET
	} else if user.Token == "" {
		flag = ISSUE_ONLY_FOR_TOKEN
	} else {
		status := dao.UpdateUserAllowIssue(user.ChatID, true, true)
		if status == xstatus.DbNotFound {
			flag = BIND_NOT_YET
		} else if status == xstatus.DbFailed {
			flag = ALLOW_ISSUE_FAILED
		} else {
			flag = ALLOW_ISSUE_FILTER_SUCCESS
		}
	}
	_ = server.Bot().Reply(m, flag)
}

// button.InlineBtnNotFilter
func InlineBtnNotFilterCtrl(c *telebot.Callback) {
	m := c.Message
	_, _ = server.Bot().Edit(m, fmt.Sprintf("%s (not filter)", m.Text))

	flag := ""
	user := dao.QueryUser(m.Chat.ID)
	if user == nil {
		flag = BIND_NOT_YET
	} else if user.Token == "" {
		flag = ISSUE_ONLY_FOR_TOKEN
	} else {
		status := dao.UpdateUserAllowIssue(user.ChatID, true, false)
		if status == xstatus.DbNotFound {
			flag = BIND_NOT_YET
		} else if status == xstatus.DbFailed {
			flag = ALLOW_ISSUE_FAILED
		} else {
			flag = ALLOW_ISSUE_NOT_FILTER_SUCCESS
		}
	}
	_ = server.Bot().Reply(m, flag)
}

// /disallowissue
func DisallowIssueCtrl(m *telebot.Message) {
	user := dao.QueryUser(m.Chat.ID)
	if user == nil {
		_ = server.Bot().Reply(m, BIND_NOT_YET)
		return
	} else if user.Token == "" {
		_ = server.Bot().Reply(m, ISSUE_ONLY_FOR_TOKEN)
		return
	}

	flag := ""
	status := dao.UpdateUserAllowIssue(user.ChatID, false, false)
	if status == xstatus.DbNotFound {
		flag = BIND_NOT_YET
	} else if status == xstatus.DbFailed {
		flag = DISALLOW_ISSUE_FAILED
	} else {
		flag = DISALLOW_ISSUE_SUCCESS
	}
	_ = server.Bot().Reply(m, flag)
}

// /listfilter
func ListFilterCtrl(m *telebot.Message) {
	user := dao.QueryUser(m.Chat.ID)
	if user == nil {
		_ = server.Bot().Reply(m, BIND_NOT_YET)
		return
	}
	filters := dao.QueryFilters(m.Chat.ID)
	if len(filters) == 0 {
		_ = server.Bot().Reply(m, FILTER_NONE)
		return
	}

	sb := strings.Builder{}
	for idx, filter := range filters {
		sb.WriteString(fmt.Sprintf("\n%d: %s %s %s", idx+1, filter.RepoName, filter.Actor, filter.EventType))
		if filter.EventType != "*" {
			if service.IsActivityEvent(filter.EventType) { // end with "Event"
				sb.WriteString(" (activity event)")
			} else {
				sb.WriteString(" (issue event)")
			}
		}
	}
	_ = server.Bot().Reply(m, fmt.Sprintf(FILTER_RESULT, len(filters), sb.String()))
}

// /addfilter
func AddFilterCtrl(m *telebot.Message) {
	user := dao.QueryUser(m.Chat.ID)
	if user == nil {
		_ = server.Bot().Reply(m, BIND_NOT_YET)
		return
	}
	server.Bot().SetStatus(m.Chat.ID, fsm.AddingFilter)
	_ = server.Bot().Reply(m, ADD_FILTER_Q, telebot.ModeMarkdown)
}

// fsm.AddingFilter
func FromAddingFilterCtrl(m *telebot.Message) {
	sp := strings.Split(m.Text, " ")
	if len(sp) != 3 {
		_ = server.Bot().Reply(m, WRONG_FILTER_PATTERN, telebot.ModeMarkdown)
		return
	}

	reponame := sp[0]
	actor := sp[1]
	eventType := sp[2]

	ok, err := service.CheckRepoExist(reponame)
	if err != nil {
		server.Bot().SetStatus(m.Chat.ID, fsm.None)
		_ = server.Bot().Reply(m, GITHUB_FAILED)
		return
	} else if !ok {
		server.Bot().SetStatus(m.Chat.ID, fsm.None)
		_ = server.Bot().Reply(m, GITHUB_ACTOR_NOT_FOUND)
		return
	}
	ok, err = service.CheckActorExist(actor)
	if err != nil {
		server.Bot().SetStatus(m.Chat.ID, fsm.None)
		_ = server.Bot().Reply(m, GITHUB_FAILED)
		return
	} else if !ok {
		server.Bot().SetStatus(m.Chat.ID, fsm.None)
		_ = server.Bot().Reply(m, GITHUB_REPO_NOT_FOUND)
		return
	}

	sts := dao.CreateFilter(m.Chat.ID, reponame, actor, eventType)
	if sts == xstatus.DbFailed {
		server.Bot().SetStatus(m.Chat.ID, fsm.None)
		_ = server.Bot().Reply(m, ADD_FILTER_FAILED)
		return
	} else if sts == xstatus.DbExisted {
		server.Bot().SetStatus(m.Chat.ID, fsm.None)
		_ = server.Bot().Reply(m, fmt.Sprintf(FILTER_EXISTED, reponame, actor, eventType))
		return
	}

	eventFlag := "all events"
	actorFlag := "all actors"
	repoFlag := fmt.Sprintf("repository [%s](https://github.com/%s)", reponame, reponame)
	if eventType != "*" {
		if service.IsActivityEvent(eventType) {
			eventFlag = xstring.SnakeCase(strings.TrimSuffix(eventType, "Event"))
		} else {
			eventFlag = xstring.SnakeCase(eventType)
		}
		eventFlag = fmt.Sprintf("the %s event", eventFlag)
	}
	if actor != "*" {
		actorFlag = fmt.Sprintf("actor [%s](https://github.com/%s)", actor, actor)
	}
	server.Bot().SetStatus(m.Chat.ID, fsm.None)
	_ = server.Bot().Reply(m, fmt.Sprintf(ADD_FILTER_SUCCESS, eventFlag, actorFlag, repoFlag), telebot.ModeMarkdown)
}

// /deletefilter
func DeleteFilterCtrl(m *telebot.Message) {
	user := dao.QueryUser(m.Chat.ID)
	if user == nil {
		_ = server.Bot().Reply(m, BIND_NOT_YET)
		return
	}
	server.Bot().SetStatus(m.Chat.ID, fsm.DeletingFilter)
	_ = server.Bot().Reply(m, DELETE_FILTER_Q, telebot.ModeMarkdown)
}

// fsm.DeletingFilter
func FromDeletingFilterCtrl(m *telebot.Message) {
	sp := strings.Split(m.Text, " ")
	if len(sp) != 3 {
		_ = server.Bot().Reply(m, WRONG_FILTER_PATTERN, telebot.ModeMarkdown)
		return
	}

	reponame := sp[0]
	actor := sp[1]
	eventType := sp[2]
	sts := dao.DeleteFilter(m.Chat.ID, reponame, actor, eventType)

	flag := ""
	if sts == xstatus.DbFailed {
		flag = DELETE_FILTER_FAILED
	} else if sts == xstatus.DbNotFound {
		flag = fmt.Sprintf(FILTER_NOT_FOUND, reponame, actor, eventType)
	} else {
		flag = fmt.Sprintf(DELETE_FILTER_SUCCESS, reponame, actor, eventType)
	}

	server.Bot().SetStatus(m.Chat.ID, fsm.None)
	_ = server.Bot().Reply(m, flag)
}
