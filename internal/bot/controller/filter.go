package controller

import (
	"fmt"
	"github.com/Aoi-hosizora/ahlib/xstatus"
	"github.com/Aoi-hosizora/github-telebot/internal/bot/button"
	"github.com/Aoi-hosizora/github-telebot/internal/bot/server"
	"github.com/Aoi-hosizora/github-telebot/internal/pkg/dao"
	"gopkg.in/tucnak/telebot.v2"
	"strings"
)

const (
	ALLOW_ISSUE_Q                  = "Would you need to filter the message generated by yourself?"
	ALLOW_ISSUE_FAILED             = "Failed to allow bot to send issue events periodically."
	ALLOW_ISSUE_FILTER_SUCCESS     = "Success to allow bot to send issue events periodically (filter message generated by myself)."
	ALLOW_ISSUE_NOT_FILTER_SUCCESS = "Success to allow bot to send issue events periodically (do not filter message generated by myself)."

	DISALLOW_ISSUE_FAILED  = "Failed to disallow bot to send issue events periodically."
	DISALLOW_ISSUE_SUCCESS = "Success to disallow bot to send issue events periodically."
)

// /allowissue
func AllowIssueCtrl(m *telebot.Message) {
	user := dao.QueryUser(m.Chat.ID)
	if user == nil {
		_ = server.Bot().Reply(m, BIND_NOT_YET)
		return
	}
	if user.Token == "" {
		_ = server.Bot().Reply(m, ISSUE_ONLY_FOR_TOKEN)
		return
	}

	_ = server.Bot().Reply(m, ALLOW_ISSUE_Q, &telebot.ReplyMarkup{
		InlineKeyboard: [][]telebot.InlineButton{
			{*button.InlineBtnFilter, *button.InlineBtnNotFilter}, {*button.InlineBtnCancel},
		},
	})
}

// button.InlineBtnFilter
func InlineBtnFilterCtrl(c *telebot.Callback) {
	m := c.Message
	_, _ = server.Bot().Edit(m, fmt.Sprintf("%s (filter)", m.Text))

	flag := ""
	user := dao.QueryUser(m.Chat.ID)
	if user == nil {
		flag = BIND_NOT_YET
	} else if user.Token == "" {
		flag = ISSUE_ONLY_FOR_TOKEN
	} else {
		status := dao.UpdateUserAllowIssue(user.ChatID, true, true)
		if status == xstatus.DbNotFound {
			flag = BIND_NOT_YET
		} else if status == xstatus.DbFailed {
			flag = ALLOW_ISSUE_FAILED
		} else {
			flag = ALLOW_ISSUE_FILTER_SUCCESS
		}
	}
	_ = server.Bot().Reply(m, flag)
}

// button.InlineBtnNotFilter
func InlineBtnNotFilterCtrl(c *telebot.Callback) {
	m := c.Message
	_, _ = server.Bot().Edit(m, fmt.Sprintf("%s (not filter)", m.Text))

	flag := ""
	user := dao.QueryUser(m.Chat.ID)
	if user == nil {
		flag = BIND_NOT_YET
	} else if user.Token == "" {
		flag = ISSUE_ONLY_FOR_TOKEN
	} else {
		status := dao.UpdateUserAllowIssue(user.ChatID, true, false)
		if status == xstatus.DbNotFound {
			flag = BIND_NOT_YET
		} else if status == xstatus.DbFailed {
			flag = ALLOW_ISSUE_FAILED
		} else {
			flag = ALLOW_ISSUE_NOT_FILTER_SUCCESS
		}
	}
	_ = server.Bot().Reply(m, flag)
}

// /disallowissue
func DisallowIssueCtrl(m *telebot.Message) {
	user := dao.QueryUser(m.Chat.ID)
	if user == nil {
		_ = server.Bot().Reply(m, BIND_NOT_YET)
		return
	} else if user.Token == "" {
		_ = server.Bot().Reply(m, ISSUE_ONLY_FOR_TOKEN)
		return
	}

	flag := ""
	status := dao.UpdateUserAllowIssue(user.ChatID, false, false)
	if status == xstatus.DbNotFound {
		flag = BIND_NOT_YET
	} else if status == xstatus.DbFailed {
		flag = DISALLOW_ISSUE_FAILED
	} else {
		flag = DISALLOW_ISSUE_SUCCESS
	}
	_ = server.Bot().Reply(m, flag)
}

// /listfilter
func ListFilterCtrl(m *telebot.Message) {
	filters := dao.QueryFilters(m.Chat.ID)
	if len(filters) == 0 {
		_ = server.Bot().Reply(m, "You have not any notify filters, please send /addfilter to add one.")
		return
	}

	sb := strings.Builder{}
	for _, filter := range filters {
		sb.WriteString("\n")
		sb.WriteString(filter.RepoName)
		sb.WriteString(" - ")
		sb.WriteString(filter.EventType)
		if filter.IsActivity {
			sb.WriteString(" (activity event)")
		} else {
			sb.WriteString(" (issue event)")
		}
	}
	_ = server.Bot().Reply(m, fmt.Sprintf("Filters (all for %d):%s", len(filters), sb.String()))
}

// /addfilter
func AddFilterCtrl(m *telebot.Message) {

}

// fsm.AddingFilter
func FromAddingFilterCtrl(m *telebot.Message) {

}

// /deletefilter
func DeleteFilterCtrl(m *telebot.Message) {

}

// fsm.DeletingFilter
func FromDeletingFilterCtrl(m *telebot.Message) {

}
